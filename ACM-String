StarHai字符串模板
KMP
void GetFail(char *P,int *Next)//得到失配函数
{
	int len = strlen(P);
	Next[0]= 0, Next[1]=0;	
	for(int i=1;i<len;i++)
	{
		int j=Next[i];		
		while(j && P[i]!=P[j]) j=Next[j];		
		Next[i+1] = P[i]==P[j]? j+1:0; 
	}	
}
void Find(char *T,char *P,int *Next)
{//查找字符串在文本串出现的位置
	int len1 = strlen(T), len2 = strlen(P);	
	GetFail(P,Next);	
	int j = 0;	
	for(int i=0;i<len1;i++)	
{
		while(j && P[j]!=T[i])  j=Next[j];		
		if(P[j]==T[i])  j++;		
		if(j==len2)  cout<<i-len2+1<<endl;						
	}	
}
EXKMP
(求s2与s1的每一个后缀的最大公共前缀)
const int maxn=100010; //字符串长度最大值  
int next[maxn],ex[maxn]; //ex数组即为extend数组  
//预处理计算next数组  
void GETNEXT(char *str)  
{  
    int i=0,j,po,len=strlen(str);  
    next[0]=len;
    while(str[i]==str[i+1]&&i+1<len)
    i++;  next[1]=i;  
po=1;    
for(i=2;i<len;i++)  
    {  
        if(next[i-po]+i<next[po]+po)
        next[i]=next[i-po];  
        else {  
            j=next[po]+po-i;  
            if(j<0) j=0;  
            while(i+j<len&&str[j]==str[j+i])   j++;  
            next[i]=j;  po=i;
        }  
    }  
}  
void EXKMP(char *s1,char *s2)  //计算extend数组  
{  
    int i=0,j,po,len=strlen(s1),l2=strlen(s2);  
    GETNEXT(s2);//计算子串的next数组  
    while(s1[i]==s2[i]&&i<l2&&i<len)//计算ex[0]  
    i++;  ex[0]=i;  
    po=0;//初始化po的位置  
    for(i=1;i<len;i++)  
    {  
        if(next[i-po]+i<ex[po]+po)//第一种情况，直接可以得到ex[i]的值  
        ex[i]=next[i-po];  
        else//第二种情况，要继续匹配才能得到ex[i]的值  
        {  
            j=ex[po]+po-i;  
            if(j<0)j=0;//如果i>ex[po]+po则要从头开始匹配  
            while(i+j<len&&j<l2&&s1[j+i]==s2[j])   j++;  
            ex[i]=j;  
            po=i;//更新po的位置  
        }  
    }  
} 
Trie
(HDU1251查找以某个串为前缀的串的数量)
struct Trie{
	int ch[maxnode][sidma_size];
	int pos;
	int val[maxnode];
	int num[maxnode];
	trie()
	{
		memset(ch[0],0,sizeof(ch[0]));
		memset(num,0,sizeof(num));
		pos=1;
	} 
	int idx(char chr) { return chr-'a'; }
	void Insert(char *s,int v)
	{
			int u=0,n=strlen(s);
			for(int i=0;i<n;i++)
			{
				int c=idx(s[i]);
				if(!ch[u][c])
				{
					memset(ch[pos],0,sizeof(ch[pos]));
					val[pos]=0;
					ch[u][c]=pos++;
				}
				u=ch[u][c];
				num[u]++;
			}
			val[pos]=v;
	}
	int Query(char s)//	
{
		int n=strlen(s),u=0;
		for(int i=0;i<n;i++)
		{
			int c=idx(s[i]);
			if(!ch[u][c]) break;
			u=ch[u][c];
		}
		return num[u];
	}
} Tree;
Manacher
Len[i]表示以字符T[i]为中心的最长回文字串的最右字符到T[i]的长度，比如以T[i]为中心的最长回文	字串是T[l,r],那么Len[i]=r-i+1。
char str[3000005],s[3000005];  
int n,mx,id,len;  
void init()
{  
    int k=0;  str[k++] = '$';  
    for(int i=0;i<len;i++)  str[k++]='#',str[k++]=s[i];  
    str[k++]='#';  len=k;  
}  
int Manacher()
{  
  	Len[0] = 0;  
  	int sum = 0; mx = 0;  
  	for(int i=1;i<len;i++)
{  
    	if(i < mx) Len[i] = Min(mx - i, Len[2 * id - i]);  
    else Len[i] = 1;  
   	while(str[i - Len[i]]== str[i + Len[i]]) Len[i]++;  
    if(Len[i] + i > mx)
{  
      	mx = Len[i] + i;  id = i;  
      	sum = Max(sum, Len[i]);  
    }  
  }  
  return (sum - 1);  
}  
int main()  
{  
  	scanf("%d",&n);  
  	while(n--)
{  
    	memset(str,0,sizeof(str));
    	scanf("%s",s);  
    	len = strlen(s);  
    	init();  
    	int temp = Manacher();  
    	printf("%d\n",temp);  
  	}  
  	return 0;  
}  
可持久化Trie树+DFS序
HDU6191给你一棵有根树，树上每个节点有一个值，每次询问以u为根节点的子树异或上x的最大值。 
const int maxn = 100000 + 10;  
int n, q, cnt, tot;  
int Rank[maxn];//节点在数组上的位置  
int L[maxn];//dfs进入时间戳  
int R[maxn];//dfs出时间戳  
int v[maxn];//顶点权值  
int T[maxn];//n棵字典树的根节点  
struct node{      
    int sum,l, r;      
    node(){ sum = 0; l = 0; r = 0; } 
}Tree[maxn<<6]; 
int head[maxn],ee = 0;  
struct edge{      
    int v , last; 
}Edge[maxn];  
void add(int u, int v)  
{      
    Edge[ee].v = v;      
    Edge[ee].last = head[u];      
    head[u] = ee++;  
} 
void dfs(int u)  
{      
    L[u] = ++cnt;      
    for(int i = head[u]; i != -1 ; i = Edge[i].last)      
    {          
        int v = Edge[i].v;          
        dfs(v);      
    }     
    R[u] = cnt;  
} 
void Insert(int root, int x, int value)  
{      
    int p = root;      
    for(int i = 30; i >= 0; i--)      
    {          
        int num = (x>>i)&1;          
        if(num == 0)          
        {              
            if(Tree[p].l == 0)              
            {                  
                Tree[p].l = tot++;                  
                p = Tree[p].l;                  
                Tree[p].sum += value;              
            }              
            else  p = Tree[p].l,  Tree[p].sum += value;                 
        }          
        else       
        {             
            if(Tree[p].r == 0)             
            {                  
                Tree[p].r = tot++;                  
                p = Tree[p].r;                  
                Tree[p].sum += value;              
            }              
            else              
            {                  
                p = Tree[p].r;                  
                Tree[p].sum += value;              
            }          
        }      
    }  
}  
int update(int pa, int x)  
{      
    int now = tot++;      
    int p = now;     
    for(int i = 30; i >= 0; i--)     
    {          
        int num = (x>>i)&1;          
        if(num == 0)          
        {              
            Tree[p].r = Tree[pa].r;              
            Tree[p].l = tot++;              
            p = Tree[p].l; pa = Tree[pa].l;              
            Tree[p].sum = Tree[pa].sum + 1;          
        }          
        else         
        {              
            Tree[p].l = Tree[pa].l;              
            Tree[p].r = tot++;              
            p = Tree[p].r;  pa = Tree[pa].r;              
            Tree[p].sum = Tree[pa].sum + 1;          
            }      
        }      
        return now;    
}  
int query(int p1, int p2, int x)  
{      
    int d;      
    int ans = 0;      
    for(int i = 30; i >= 0; i--)      
    {          
        int num = (x>>i)&1;          
        if(num == 0)          
        {              
            if(Tree[p2].r == 0)              
            {                  
                p2 = Tree[p2].l;                  
                p1 = Tree[p1].l;                  
                continue;              
            }              
            d = Tree[Tree[p2].r].sum - Tree[Tree[p1].r].sum;              
            if(d > 0)              
            {                  
                ans += (1<<i);                  
                p1 = Tree[p1].r;                  
                p2 = Tree[p2].r;              
            }              
            else  p1 = Tree[p1].l,p2 = Tree[p2].l;                       
        }          
        else          
        {              
            if(Tree[p2].l == 0)              
            {                  
                p2 = Tree[p2].r; p1 = Tree[p1].r;                  
                continue;              
            }              
            d = Tree[Tree[p2].l].sum - Tree[Tree[p1].l].sum;              
            if(d > 0) { ans += (1<<i); p1 = Tree[p1].l; p2 = Tree[p2].l; }              
            else  p1 = Tree[p1].r,p2 = Tree[p2].r;                       
        }      
    }      
    return ans;  
}  
void init()  
{      
    cnt = 0; tot = 0; dfs(1);      
    for(int i = 1; i <= n; i++)  Rank[L[i]] = v[i];       
}  
int main() 
{               
    while(~scanf("%d%d", &n, &q))      
    {          
        for(int i=0; i <(maxn<<6)-1; i++)Tree[i].l=Tree[i].r=Tree[i].sum=0;                  
        for(int i = 1; i <= n; i++)  scanf("%d", &v[i]);                   
        int f;  ee = 0;          
        memset(head, -1, sizeof(head));          
        for(int i = 1; i < n; i++)  scanf("%d", &f),add(f, i + 1);                 
        init();  T[0] = ++tot;          
        for(int i = 1; i <= n; i++)  Insert(T[0], Rank[i], 1);                 
        for(int i = 1; i <= n; i++)  Insert(T[0], Rank[i], -1);                
        for(int i = 1; i <= n; i++)  T[i] = update(T[i - 1], Rank[i]);           
        int uu, xx;          
        for(int i = 1; i <= q; i++)          
        {              
            scanf("%d%d", &uu, &xx);              
            printf("%d\n", query(T[L[uu] - 1], T[R[uu]], xx));            
        }      
    }      
	return 0;  
}  
SAM (后缀自动机)
parent tree上DP得到每一个类中的子串和在原串中出现的位置相关的一些信息。例如，出现的次数，第一次出现的位置，出现在某个位置之后的次数等。
洛谷p3975 //求字典序第K小串 
struct SAM{//求字典序第K小串 
	int l[maxn<<1],fa[maxn<<1],nxt[maxn<<1][26];
	int last,cnt,c[maxn<<1],siz[maxn<<1],sum[maxn<<1],a[maxn<<1];
	void Init()
	{
		memset(siz,0,sizeof(siz));
		memset(c,0,sizeof(c));
		memset(sum,0,sizeof(sum));
		memset(a,0,sizeof(a));
		last=cnt=1;
		memset(nxt[1],0,sizeof(nxt[1]));
		fa[1]=l[1]=0;
	}
	int NewNode()
	{
		cnt++;
		memset(nxt[cnt],0,sizeof(nxt[cnt]));
		fa[cnt]=l[cnt]=0;
		return cnt;
	}
	void Add(int ch)
	{
		int p=last,np=NewNode();
		last=np; l[np]=l[p]+1;
		siz[np]=1;
		while(p&&!nxt[p][ch]) nxt[p][ch]=np,p=fa[p];
		if(!p) fa[np]=1;
		else
		{
			int q=nxt[p][ch];
			if(l[q]==l[p]+1) fa[np]=q;
			else
			{
				int nq=NewNode();
				memcpy(nxt[nq],nxt[q],sizeof(nxt[q]));
				fa[nq]=fa[q];
				l[nq]=l[p]+1;
				fa[np]=fa[q]=nq;
				while(nxt[p][ch]==q) nxt[p][ch]=nq,p=fa[p];
			}
		}
	}
	void Build()
	{
        int len=strlen(s+1);
        for(int i=1;i<=len;i++) Add(s[i]-'a');
	}
	void topusort()
	{
		for(int i=1;i<=cnt;++i) c[l[i]]++;
		for(int i=1;i<=cnt;++i) c[i]+=c[i-1];
		for(int i=1;i<=cnt;++i) a[c[l[i]]--]=i;
		for(int i=cnt;i;--i)
		{//t==1:不同位置的相同子串视为不同 
			if(t) siz[fa[a[i]]]+=siz[a[i]];
			else siz[a[i]]=1;//t==0:视为相同 
		}
		siz[1]=0;
		for(int i=cnt;i;--i)
		{
			sum[a[i]]=siz[a[i]];
			for(int j=0;j<26;++j)
				if(nxt[a[i]][j]) sum[a[i]]+=sum[nxt[a[i]][j]];
		}
	}	
	void dfs()
	{
		if(k>sum[1]){puts("-1");return ;}
		int now=1;
		while(k>0)
		{
			int p=0;
			while(k>sum[nxt[now][p]])
			{
				k-=sum[nxt[now][p]];
				p++;
			}
			now=nxt[now][p];
			putchar('a'+p);
			k-=siz[now];
		}
		return ;
	}
} sam;
int main()
{
	scanf("%s%d%d",s+1,&t,&k);
	sam.Init();   sam.Build(); 
	sam.topusort();  sam.dfs();
	return 0;
}
ACAM (AC自动机)
HDU2222:查找有几个模式串在文本串中出现过
	#include<bits/stdc++.h>
	using namespace std;
	#define maxn 500005  
	int n,T;  
	char s[maxn<<1];   								
    int ch[maxn][26],fail[maxn],val[maxn],last[maxn]; 
    int times[10005],cnt[10005]; // 每个单词出现次数   
    int tot,num;                //单词总数以及单词出现了几个  
    void init()  
    {  
        num=0;  tot=1;  
        memset(ch[0],0,sizeof(ch[0]));  
        memset(cnt,0,sizeof(cnt));  
        memset(times,0,sizeof(times));  
    }     
	int idx(char c){ return c - 'a';}  
    void insert(char*s,int v) //插入
    {  
        int u=0,n=strlen(s);  
        for(int i=0;i<n;++i)  
        {  
            int c=idx(s[i]);  
            if(!ch[u][c])  
            {  
                memset(ch[tot],0,sizeof(ch[tot]));  
                val[tot]=0;  
                ch[u][c]=tot++;   
            }  
            u=ch[u][c];  
        }  
        if(val[u]) times[val[u]]++;//重复的模式串  
        else  val[u]=v,times[v]=1;  
    }
	void getFail()  
    {  
        queue<int> q;  
        fail[0]=0;  
        for(int c=0;c<26;++c)  
        {  
            int u=ch[0][c];  
            if(u){ fail[u]=0;q.push(u);last[u]=0; }  
        }  
        while(!q.empty())  
        {  
            int r=q.front(); q.pop();  
            for(int c=0;c<26;++c)  
            {  								
                int u=ch[r][c];  
                if(!u){ch[r][c]=ch[fail[r]][c];continue;}  
                q.push(u);  
                int v=fail[r];  
                fail[u]=ch[v][c];  
                last[u] = val[fail[u]]?fail[u]:last[fail[u]];  
            }  
        }  
    }   
    void print(int i,int j)                   
    {  
        if(j)   
        {  
            if(!cnt[val[j]])  num+=times[val[j]];  
            cnt[val[j]]++; //每个模式串出现的次数 
            print(i,last[j]);  
        }  
    }  
    void find(char *T)  
    {  
        int n=strlen(T);  
        int j=0;  
        for(int i=0;i<n;++i)  
        {  
            int c=idx(T[i]);  
          	j=ch[j][c];  
            if(val[j]) print(i,j);  
            else if(last[j]) print(i,last[j]);  
        }  
    }    
	int main()  
	{  
	    cin>>T;
	    while(T--)  
	    {  
	        init(); cin>>n;  
	        for(int i=1;i<=n;i++)  
	        {  
	            scanf("%s",s);  
	            insert(s,i);  
	        }  
	        getFail();  
	        scanf("%s",s);  
	        find(s);  
	        cout<<num<<endl;  
	    }
		return 0;  
	}   

